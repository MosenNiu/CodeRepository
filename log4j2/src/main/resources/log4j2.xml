<?xml version="1.0" encoding="UTF-8"?>
<!--status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出-->
<!--monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。-->
<Configuration status="WARN" monitorInterval="30">

    <Properties>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">/home/logs/log4j2</Property>
        <!-- 配置日志输出格式 -->
        <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{1.} %l %M %logger %u %sn - %msg%xEx%n</Property>
    </Properties>
    <!--
        %d{yyyy-MM-dd HH:mm:ss.SSS}   "d", "date" 时间格式
        %-5level  "p", "level" 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
        %C{1.}    "C", "class" 类名，包名只有1位
        %C{3}     获取类名前3级目录(包含类名)
        %L   "L", "line" 输出行号
        %M   "M", "method" 输出所在方法名
        %m   "m", "msg", "message" 日志文本
        %xEx "xEx", "xThrowable", "xException"   ExtendedThrowablePatternConverter
              "ex", "throwable", "exception"     ThrowablePatternConverter
              "rEx", "rThrowable", "rException"  RootThrowablePatternConverter
        %n 换行

        其他占位符有(部分)：
        %l   "l", "location" 输出语句所在的行数, 包括类名、方法名、文件名、行数      例如：hahaha.Log4j2Test.main(Log4j2Test.java:15)
        %T   "T", "tid", "threadId" 输出线程ID
        %t   "t", "tn", "thread", "threadName" 输出当前线程名称
        %tp  "tp", "threadPriority" 输出线程权级
        %F   "F", "file" 输出所在的类文件名，如Log4j2Test.java
        %logger   "c", "logger" 输出logger名称，LogManager.getLogger(Log4j2Test.class);中的名称，此处是hahaha.Log4j2Test
        %N      "N", "nano" 纳秒
        %sn     "sn", "sequenceNumber"  日志计数(全局)
        %u      "u", "uuid"  UUID(全局)
        %X{ip}  "X", "mdc", "MDC"  MDC方式获取ip(等同于 %MDC{ip} 和 %mdc{ip} )
        %x      "x", "NDC" NDC方式
     -->


    <Appenders>

        <!--这个输出控制台的配置, name用于节点引用, target是输出格式,可为 SYSTEM_OUT(默认) 或 SYSTEM_ERR-->
        <Console name="console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <!--<ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>-->
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="${pattern}"/>
        </Console>

        <!-- 输出到文件设置，RollingFile与此标签类似，为非缓存方式写入，性能比这种方式略低  immediateFlush为是否立即写入文件标识 -->
        <RollingRandomAccessFile name="service" immediateFlush="false" fileName="${LOG_HOME}/service.log"
                                 filePattern="${LOG_HOME}/old/service.%d{yyyy-MM-dd}.log.gz">
            <PatternLayout charset="UTF-8" pattern="${pattern}" />
            <Policies>
                <!--每次JVM重新运行都会触发。-->
                <!--<OnStartupTriggeringPolicy/>-->
                <!-- 每天更新一次 interval的值依据filePattern的日期格式增加，即如果日期格式为分钟，则1分钟更新一次 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
                <!-- 文件达到指定大小后更新 -->
                <SizeBasedTriggeringPolicy size="1GB" />
            </Policies>
            <!-- 最多备份10个 -->
            <DefaultRolloverStrategy max="10" />
        </RollingRandomAccessFile>

        <!-- 分级别记录日志 -->
        <!-- DEBUG日志格式 -->
        <RollingRandomAccessFile name="service_debug" immediateFlush="false" fileName="${LOG_HOME}/service_debug.log"
                                 filePattern="${LOG_HOME}/service_debug.%d{yyyy-MM-dd}.log.gz">
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- info日志格式 -->
        <RollingRandomAccessFile name="service_info" immediateFlush="false" fileName="${LOG_HOME}/service_info.log"
                                 filePattern="${LOG_HOME}/service_info.%d{yyyy-MM-dd}.log.gz">
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- warn日志格式 -->
        <RollingRandomAccessFile name="service_warn" immediateFlush="false" fileName="${LOG_HOME}/service_warn.log"
                                 filePattern="${LOG_HOME}/service_warn.%d{yyyy-MM-dd}.log.gz">
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- error日志格式 -->
        <RollingRandomAccessFile name="service_error" immediateFlush="false" fileName="${LOG_HOME}/service_error.log"
                                 filePattern="${LOG_HOME}/service_error.%d{yyyy-MM-dd}.log.gz">
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>
    </Appenders>

    <Loggers>
        <!-- 配置日志的根节点 -->
        <root level="info">
            <appender-ref ref="console"/>
        </root>

        <!-- logger继承root, 此处即为继承输出到控制台，通过属性 additivity="false" 可取消继承 -->
        <!-- 第三方日志系统 -->
        <logger name="org.springframework.core" level="error"/>
        <logger name="org.springframework.beans" level="error"/>
        <logger name="org.springframework.context" level="error"/>
        <logger name="org.springframework.web" level="error"/>
        <logger name="org.jboss.netty" level="error"/>
        <logger name="org.apache.http" level="error"/>
        <logger name="org.apache.zookeeper" level="error" additivity="false"/>
        <!-- 日志实例(info), name属性为包名 -->
        <logger name="hahaha" level="info" additivity="true">
            <appender-ref ref="service_info"/>
        </logger>

        <!-- 日志实例(debug) -->
        <logger name="hahaha" level="debug" >
            <appender-ref ref="service_debug"/>
        </logger>

        <!-- 日志实例(debug) -->
        <logger name="hahaha" level="error" >
            <appender-ref ref="service_error"/>
        </logger>
    </Loggers>

</Configuration>